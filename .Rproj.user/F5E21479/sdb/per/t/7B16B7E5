{
    "contents" : "#####################################################\n## This script solves a game based on a user-defined\n## payoff matrix\n##\n## Jarrod Olson, jarrod.olson@outlook.com\n#####################################################\nEnsurePackage <- function(x){\n  x <- as.character(x)\n  if(!require(x,character.only=TRUE)){\n    install.packages(pkgs=x,repos=\"http://cran.r-project.org\")\n    require(x,character.only=TRUE)\n  }\n}\n\n##TODO: Need function to visualize payoff matrix\npayoffMatrix.print <- function(payoffs,option=\"standard\"){\n  EnsurePackage('xtable')\n  for(i in 1:nrow(payoffs)){\n    data <- payoffs[i,]\n    coop_coop <- paste(data$a_coop,data$b_coop,sep=\":\")\n    coopa_defectb <- paste(data$a_coop,data$b_defect,sep=\":\")\n    defecta_coopb <- paste(data$a_defect,data$b_coop,sep=\":\")\n    defect_defect <- paste(data$a_defect,data$b_defect,sep=\":\")\n    col1 <- data.frame(\"X\"=c(\"\",\"\",\"Player A\",\"Player A\"))\n    col2 <- data.frame(\"Y\"=c(\"\",\"\",\"Cooperate\",\"Defect\"))\n    col3 <- data.frame(\"Z\"=c(\"Player B\",\"Cooperate\",coop_coop,defecta_coopb))\n    col4 <- data.frame(\"W\"=c(\"Player B\",\"Defect\",coopa_defectb,defect_defect))\n    out <- cbind(col1,col2,col3,col4)\n    if(option==\"standard\"){\n      print(out)\n    }\n    if(option==\"latex\"){\n      print(xtable(out,caption=paste(\"Payoff Table\",i)),type=\"latex\")\n    }\n    if(option==\"html\"){\n      print(xtable(out,caption=paste(\"Payoff Table\",i)),type='html')\n    }\n  }\n}\n\n##TODO: Need function to solve game\ngame.solve <- function(payoffs){\n  choiceAList <- c()\n  payoffAList <- c()\n  choiceBList <- c()\n  payoffBList <- c()\n  outcomeList <- c()\n  for(i in 1:nrow(payoffs)){\n    data <- payoffs[i,]\n    new <- data.frame(choice=c(\"coop\",\"defect\"),a=c(data$a_coop,data$a_defect),b=c(data$b_coop,data$b_defect),stringsAsFactors=FALSE)\n    payoffA <- max(new$a)\n    payoffAList <- c(payoffAList,payoffA)\n    payoffB <- max(new$b)\n    payoffBList <- c(payoffBList,payoffB)\n    error <- FALSE\n    if(new[1,]$a==new[2,]$a){\n      ##print(\"Error - A unresolved\")\n      error <- TRUE\n    }\n    if(new[1,]$b==new[2,]$b){\n      ##print(\"Error - B unresolved\")\n      error <- TRUE\n    }\n    if(error==FALSE){\n      choiceA <- new[which(new$a==payoffA),]$choice\n      choiceB <- new[which(new$b==payoffB),]$choice\n    }\n    if(error==TRUE){\n      choiceA <- \"ERROR\"\n      choiceB <- \"ERROR\"\n    }\n    outcome <- \"undefined\"\n    if(choiceA==\"defect\" & choiceB==\"defect\"){\n      outcome <- \"Prisoners Dilemna\"\n    }\n    if(choiceA==\"coop\" & choiceB ==\"coop\"){\n      outcome <- \"Cooperative\"\n    }\n    if(choiceA!=choiceB){\n      outcome <- \"Uncooperative\"\n    }\n    if(choiceA==\"ERROR\" | choiceB==\"ERROR\"){\n      outcome <- \"ERROR\"\n    }\n    choiceAList <- c(choiceAList,choiceA)\n    choiceBList <- c(choiceBList,choiceB)\n    outcomeList <- c(outcomeList,outcome)\n  }\n  dataNew <- data.frame(choiceA=choiceAList,choiceB=choiceBList,outcome=outcomeList,payoffA=payoffAList,payoffB=payoffBList)\n#   payoffs$choiceA <- choiceAList\n#   payoffs$choiceB <- choiceBList\n#   payoffs$outcome <- outcomeList\n  return(dataNew)\n}\n\na_coop <- c(1,1)\na_defect <- c(2,3)\nb_coop <- c(1,3)\nb_defect <- c(2,2)\n\npayoffs <- data.frame(a_coop=a_coop,a_defect=a_defect,b_coop=b_coop,b_defect=b_defect)\npayoffMatrix.print(payoffs)\npayoffOutcome <- game.solve(payoffs)\nprint(payoffOutcome)\n",
    "created" : 1399716844839.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "927123185",
    "id" : "7B16B7E5",
    "lastKnownWriteTime" : 1399738426,
    "path" : "~/_RWork/GameSolver/_Script-GameSolver.R",
    "project_path" : "_Script-GameSolver.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}